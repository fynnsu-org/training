# SPDX-License-Identifier: Apache-2.0

name: E2E (NVIDIA L40S x4) (python 3.11)

on:
  workflow_dispatch:
    inputs:
      pr_or_branch:
        description: 'pull request number or branch name'
        required: true
        default: 'main'

env:
  TMPDIR: /home/tmp

jobs:
  e2e-large-test:
    runs-on:
      - runs-on=${{ github.run_id }}
      - family=g6e.12xlarge
      - region=us-east-1
      - ami=ami-0d5fc5198e1fd429a
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    permissions:
      pull-requests: write

    steps:
      - name: "Harden Runner"
        # v2.10.1
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0
        with:
          egress-policy: audit

      - name: Checkout instructlab/training
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: "instructlab/training"
          path: "training"
          # https://github.com/actions/checkout/issues/249
          fetch-depth: 0

      # - name: Run e2e tests
      #   uses: ./training/.github/actions/run-e2e
      #   with:
      #     python-version: 3.11
      #     gh-token: ${{ secrets.GITHUB_TOKEN }}
      #     hf-token: ${{ secrets.HF_TOKEN }}
      #     openai-api-key: ${{ secrets.OPENAI_API_KEY }}
      #     son-of-jeeves-discord-webhook: ${{ secrets.SON_OF_JEEVES_DISCORD_WEBHOOK }}
      #     name: 'Run e2e tests'

      # Composite job
      - name: Install Packages
        shell: bash
        run: |
          cat /etc/os-release
          mkdir -p "${TMPDIR}"
          sudo dnf install -y gcc gcc-c++ make git python${{ matrix.python-version }} python${{ matrix.python-version }}-devel
  
      - name: Checkout instructlab/instructlab
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: "instructlab/instructlab"
          path: "instructlab"
            # https://github.com/actions/checkout/issues/249
          fetch-depth: 0
  
      - name: Determine if pr_or_branch is a PR number
        id: check_pr
        shell: bash
        run: |
          PR_OR_BRANCH=${{ github.event.inputs.pr_or_branch || 'main' }} # Default to 'main' if not set
          if [[ "$PR_OR_BRANCH" =~ ^[0-9]+$ ]]; then
          echo "is_pr=true" >> "$GITHUB_OUTPUT"
          else
          echo "is_pr=false" >> "$GITHUB_OUTPUT"
          fi
          echo "pr_or_branch=$PR_OR_BRANCH" >> "$GITHUB_OUTPUT"
  
      - name: Check if gh cli is installed
        id: gh_cli
        shell: bash
        run: |
          if command -v gh &> /dev/null ; then
          echo "gh_cli_installed=true" >> "$GITHUB_OUTPUT"
          else
          echo "gh_cli_installed=false" >> "$GITHUB_OUTPUT"
          fi
  
      - name: Install gh CLI
        if: steps.gh_cli.outputs.gh_cli_installed == 'false'
        shell: bash
        run: |
          sudo dnf install 'dnf-command(config-manager)' -y
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf install gh --repo gh-cli -y
  
      - name: test gh CLI
        shell: bash
        run: |
          gh --version
  
      - name: set default repo
        working-directory: ./training
        shell: bash
        run: |
          gh repo set-default ${{ github.server_url }}/${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Add comment to PR
        if: steps.check_pr.outputs.is_pr == 'true'
        working-directory: ./training
        shell: bash
        run: |
          gh pr comment "${{ steps.check_pr.outputs.pr_or_branch }}" -b "${{ github.workflow }} workflow launched on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Fetch and checkout PR
        if: steps.check_pr.outputs.is_pr == 'true'
        working-directory: ./training
        shell: bash
        run: |
          gh pr checkout ${{ steps.check_pr.outputs.pr_or_branch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Checkout branch
        if: steps.check_pr.outputs.is_pr == 'false'
        working-directory: ./training
        shell: bash
        run: |
          git checkout ${{ steps.check_pr.outputs.pr_or_branch }}
  
      - name: Install ilab
        working-directory: ./instructlab
        shell: bash
        run: |
          PYTHON=python${{ matrix.python-version }} ./scripts/install-ilab-with-cuda.sh
  
      - name: Update instructlab-training library
        working-directory: ./training
        shell: bash
        run: |
          . ../instructlab/venv/bin/activate
  
          # Patch out our own pin from the ilab repo constraints file
          ilab_constraints=../instructlab/constraints-dev.txt
          sed -i '/instructlab-training==/d' $ilab_constraints
  
          # Since we reuse the virtual environment prepared using ilab
          # constraints, we should stick to the same constraints when
          # installing latest training.
          #
          # FIX: this is not ideal; a proper fix would require decoupling the
          # two repos in CI: either by removing the job completely and relying
          # on "sdk" (no ilab) test runs; or by preparing a separate
          # constraints file that would consider both the requirements files
          # for the training library AND for the ilab - so that they are
          # consistent.
          pip_install="pip install -c $ilab_constraints"
          $pip_install .
          $pip_install .[cuda]
  
      - name: Check disk before tests
        if: always()
        shell: bash
        run: |
          df -h
  
      - name: Run e2e test
        working-directory: ./instructlab
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          . venv/bin/activate
  
          # set preserve to true so we can retain the logs
          ./scripts/e2e-ci.sh -lp
  
          # we know that the file will be named something like f"/training_params_and_metrics_global{os.environ['RANK']}.jsonl" in python
          # and we know that it will be written into a directory created by `mktemp -d`. 
          # Given this information, we can use the following command to find the file:
          log_files=$(find /tmp/ -name "training_params_and_metrics_global0.jsonl")
          phase_num=1;
          for log_file in $log_files; do
          mv "${log_file}" phase-${phase_num}-training-log.jsonl
          ((phase_num++))
          done
  
      - name: Check disk after tests
        if: always()
        shell: bash
        run: |
          df -h
  
      - name: Upload training logs Phase 1
        uses: actions/upload-artifact@v4
        with:
          name: phase-1-training-log.jsonl
          path: ./instructlab/phase-1-training-log.jsonl
          retention-days: 1
          overwrite: true
  
      - name: Upload training logs Phase 2
        uses: actions/upload-artifact@v4
        with:
          name: phase-2-training-log.jsonl
          path: ./instructlab/phase-2-training-log.jsonl
          retention-days: 1
          overwrite: true
  
      - name: Add comment to PR if the workflow failed
        if: failure() && steps.check_pr.outputs.is_pr == 'true'
        working-directory: ./training
        shell: bash
        run: |
          gh pr comment "${{ steps.check_pr.outputs.pr_or_branch }}" -b "e2e workflow failed on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}), please investigate."
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Add comment to PR if the workflow succeeded
        if: success() && steps.check_pr.outputs.is_pr == 'true'
        working-directory: ./training
        shell: bash
        run: |
          gh pr comment "${{ steps.check_pr.outputs.pr_or_branch }}" -b "e2e workflow succeeded on this PR: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}), congrats!"
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  

  loss-graphs:
    needs:
      - e2e-large-test
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: "Harden Runner"
        # v2.10.1
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0
        with:
          egress-policy: audit

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download loss data Phase 1
        id: phase-1-download-logs
        uses: actions/download-artifact@v4
        with:
          name: phase-1-training-log.jsonl
          path: downloaded-data

      - name: Download loss data Phase 2
        id: phase-2-download-logs
        uses: actions/download-artifact@v4
        with:
          name: phase-2-training-log.jsonl
          path: downloaded-data

      - name: Checkout instructlab/training
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: "instructlab/training"
          path: "training"
          fetch-depth: 0

      - name: Install dependencies
        working-directory: ./training
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt -c constraints-dev.txt

      - name: Try to upload Phase 1 to s3
        id: phase-1-upload-s3
        continue-on-error: true
        run: |
          python training/scripts/create-loss-graph.py  \
            --log-file "${{ steps.phase-1-download-logs.outputs.download-path }}/phase-1-training-log.jsonl" \
            --output-file "./phase-1-test.md" \
            --phase "1" \
            --aws-region "${{ vars.AWS_REGION }}" \
            --bucket-name "${{ vars.AWS_S3_LOSS_GRAPHS_BUCKET_NAME }}" \
            --base-branch "${GITHUB_REF##*/}" \
            --head-sha "${{ github.sha }}" \
            --pr-number "${{ github.event.number }}" \
            --origin-repository "${{ github.repository }}"

      - name: Try to upload Phase 2 to s3
        id: phase-2-upload-s3
        continue-on-error: true
        run: |
          python training/scripts/create-loss-graph.py  \
            --log-file "${{ steps.phase-2-download-logs.outputs.download-path }}/phase-2-training-log.jsonl" \
            --output-file "./phase-2-test.md" \
            --phase "2" \
            --aws-region "${{ vars.AWS_REGION }}" \
            --bucket-name "${{ vars.AWS_S3_LOSS_GRAPHS_BUCKET_NAME }}" \
            --base-branch "${GITHUB_REF##*/}" \
            --head-sha "${{ github.sha }}" \
            --pr-number "${{ github.event.number }}" \
            --origin-repository "${{ github.repository }}"

      - name: Check Phase 1 S3 upload status for success
        if: steps.phase-1-upload-s3.outcome == 'success'
        run: |
          echo "Uploaded Phase 1 loss graph to S3."
          cat ./phase-1-test.md >> "${GITHUB_STEP_SUMMARY}"

      - name: Check Phase 2 S3 upload status for success
        if: steps.phase-2-upload-s3.outcome == 'success'
        run: |
          echo "Uploaded Phase 2 loss graph to S3."
          cat ./phase-2-test.md >> "${GITHUB_STEP_SUMMARY}"

      - name: Check Phase 1 S3 upload status for failure
        if: steps.phase-1-upload-s3.outcome == 'failure'
        run: |
          echo "::warning::Failed to upload Phase 1 loss graph to S3. This won't block the workflow, but you may want to investigate."
          echo "Loss graph upload failed" >> "${GITHUB_STEP_SUMMARY}"

      - name: Check Phase 2 S3 upload status for failure
        if: steps.phase-2-upload-s3.outcome == 'failure'
        run: |
          echo "::warning::Failed to upload Phase 2 loss graph to S3. This won't block the workflow, but you may want to investigate."
          echo "Loss graph upload failed" >> "${GITHUB_STEP_SUMMARY}"
